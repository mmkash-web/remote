#!/usr/bin/env python
"""
Supabase PostgreSQL setup script for MikroTik Billing System.
Creates .env file with Supabase configuration and tests the connection.
"""
import os
import sys

def create_env_file():
    """Create .env file with Supabase configuration."""
    
    env_content = """# MikroTik Billing - Supabase PostgreSQL Configuration
# Generated by setup_supabase.py
# Using Session Pooler (IPv4 Compatible)

# Django Settings
SECRET_KEY=django-insecure-change-this-to-random-string-in-production
DEBUG=True
ALLOWED_HOSTS=localhost,127.0.0.1

# Supabase PostgreSQL Database Configuration
# Using IPv4-compatible Session Pooler
DATABASE_ENGINE=django.db.backends.postgresql
DATABASE_NAME=postgres
DATABASE_USER=postgres.seuzxvthbxowmofxalmm
DATABASE_PASSWORD=Emmkash20
DATABASE_HOST=aws-1-eu-west-2.pooler.supabase.com
DATABASE_PORT=5432

# Email Configuration (optional for development)
EMAIL_BACKEND=django.core.mail.backends.console.EmailBackend

# Celery (Optional - for background tasks)
CELERY_BROKER_URL=redis://localhost:6379/0
CELERY_RESULT_BACKEND=redis://localhost:6379/0

# Payment Gateway Settings (configure when ready)
MPESA_CONSUMER_KEY=
MPESA_CONSUMER_SECRET=
MPESA_SHORTCODE=
MPESA_PASSKEY=

PAYPAL_CLIENT_ID=
PAYPAL_CLIENT_SECRET=
PAYPAL_MODE=sandbox
"""
    
    if os.path.exists('.env'):
        response = input(".env file already exists. Overwrite? (y/n): ")
        if response.lower() != 'y':
            print("Skipping .env file creation.")
            return False
    
    with open('.env', 'w') as f:
        f.write(env_content)
    
    print("✓ Created .env file with Supabase configuration")
    return True


def test_psycopg2():
    """Check if psycopg2 is installed."""
    try:
        import psycopg2
        print("✓ psycopg2 is installed")
        return True
    except ImportError:
        print("✗ psycopg2 is not installed")
        print("\n  Install it with: pip install psycopg2-binary")
        return False


def test_database_connection():
    """Test connection to Supabase PostgreSQL."""
    print("\nTesting database connection...")
    
    try:
        import psycopg2
        
        conn = psycopg2.connect(
            dbname='postgres',
            user='postgres.seuzxvthbxowmofxalmm',
            password='Emmkash20',
            host='aws-1-eu-west-2.pooler.supabase.com',
            port='5432',
            connect_timeout=10
        )
        
        cursor = conn.cursor()
        cursor.execute('SELECT version();')
        version = cursor.fetchone()
        
        print("✓ Successfully connected to Supabase PostgreSQL!")
        print(f"  Database version: {version[0][:50]}...")
        
        cursor.close()
        conn.close()
        return True
        
    except Exception as e:
        print(f"✗ Connection failed: {str(e)}")
        print("\n  Troubleshooting:")
        print("  1. Check your internet connection")
        print("  2. Verify Supabase project is active")
        print("  3. Confirm password is correct")
        return False


def test_django_connection():
    """Test Django database connection."""
    print("\nTesting Django database connection...")
    
    try:
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mikrotik_billing.settings')
        import django
        django.setup()
        
        from django.db import connection
        
        with connection.cursor() as cursor:
            cursor.execute('SELECT version();')
            version = cursor.fetchone()
            print("✓ Django can connect to database!")
            print(f"  Database: {connection.settings_dict['NAME']}")
            print(f"  Host: {connection.settings_dict['HOST']}")
        
        return True
        
    except Exception as e:
        print(f"✗ Django connection failed: {str(e)}")
        return False


def run_migrations():
    """Run Django migrations."""
    print("\nRunning database migrations...")
    
    try:
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mikrotik_billing.settings')
        import django
        django.setup()
        
        from django.core.management import call_command
        
        call_command('migrate', '--noinput')
        print("✓ Migrations completed successfully!")
        return True
        
    except Exception as e:
        print(f"✗ Migration failed: {str(e)}")
        return False


def main():
    """Main setup process."""
    print("\n" + "="*60)
    print("  MikroTik Billing - Supabase PostgreSQL Setup")
    print("="*60)
    
    print("\nThis script will:")
    print("1. Create .env file with Supabase configuration")
    print("2. Test psycopg2 installation")
    print("3. Test database connection")
    print("4. Run Django migrations")
    print("5. Test Django database connection")
    
    input("\nPress Enter to continue...")
    
    # Step 1: Create .env file
    print("\n" + "-"*60)
    print("Step 1: Creating .env file")
    print("-"*60)
    create_env_file()
    
    # Step 2: Check psycopg2
    print("\n" + "-"*60)
    print("Step 2: Checking psycopg2 installation")
    print("-"*60)
    if not test_psycopg2():
        print("\nPlease install psycopg2-binary and run this script again.")
        return 1
    
    # Step 3: Test direct connection
    print("\n" + "-"*60)
    print("Step 3: Testing direct database connection")
    print("-"*60)
    if not test_database_connection():
        print("\nPlease check your connection settings and try again.")
        return 1
    
    # Step 4: Run migrations
    print("\n" + "-"*60)
    print("Step 4: Running database migrations")
    print("-"*60)
    if not run_migrations():
        print("\nMigrations failed. Please check the error above.")
        return 1
    
    # Step 5: Test Django connection
    print("\n" + "-"*60)
    print("Step 5: Testing Django database connection")
    print("-"*60)
    if not test_django_connection():
        print("\nDjango connection test failed.")
        return 1
    
    # Success!
    print("\n" + "="*60)
    print("  ✓ Setup Complete!")
    print("="*60)
    print("\nYour MikroTik Billing system is now configured with Supabase PostgreSQL!")
    print("\nNext steps:")
    print("1. Create admin user: python setup_admin.py")
    print("2. Start server: python manage.py runserver")
    print("3. Visit: http://127.0.0.1:8000")
    print("\nFor more information, see: SUPABASE_SETUP.md")
    print()
    
    return 0


if __name__ == '__main__':
    sys.exit(main())

